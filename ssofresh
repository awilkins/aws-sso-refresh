#!/usr/bin/python3

import botocore
import botocore.session
import botocore.exceptions

import argparse
import configparser
import os
import platform
import sys
import time
import webbrowser

from assume_role import assume_role

def is_inside_container():
  if not os.path.isdir('/proc/self'):
    return False

  container_found = False 
  with open('/proc/self/cgroup', 'r') as cgroups:
    for group in cgroups:
      if 'docker' in group:
        container_found = True
  
  return container_found

def get_creds_path():
  if platform.system() == 'Windows':
    user_profile = os.environ['USERPROFILE'].replace('\\', '/')
    return f"{user_profile}/.aws/credentials"
  return f"{os.environ['HOME']}/.aws/credentials"

def get_config_path():
  if platform.system() == 'Windows':
    user_profile = os.environ['USERPROFILE'].replace('\\', '/')
    return f"{user_profile}/.aws/ssofresh.ini"
  return f"{os.environ['HOME']}/.aws/ssofresh.ini"


def get_access_token(start_url, region):
  session=botocore.session.get_session()

  oidc_client = session.create_client(
    'sso-oidc',
    region_name = region
  )

  oidc_client_reg = oidc_client.register_client(
    clientName = 'ssofresh',
    clientType = 'public'
  )

  client_id = oidc_client_reg['clientId']
  client_secret = oidc_client_reg['clientSecret']

  device_auth = oidc_client.start_device_authorization(
    clientId = client_id,
    clientSecret = client_secret,
    startUrl = start_url
  )

  auth_url = device_auth['verificationUriComplete']
  if not is_inside_container():
    webbrowser.open(auth_url)
  else:
    print(f'\u001b[33m Open this URL: \u001b[0m {auth_url}')

  time.sleep(2)
  while True:
    print('Polling ... ')
    try:
      token_response = oidc_client.create_token(
        clientId=client_id,
        clientSecret=client_secret,
        grantType='urn:ietf:params:oauth:grant-type:device_code',
        deviceCode=device_auth['deviceCode']
      )
      if 'accessToken' in token_response:
        break
    except botocore.exceptions.ClientError:
      time.sleep(2)

  access_token = token_response['accessToken']
  return access_token

def check_config_sanity(group_name, config):
  if not group_name in config:
    print('Group "'+group_name+'" not found in config '+ get_config_path())
    sys.exit(1)  # abort because of missing group

  if not 'profiles' in config[group_name]:
    print('Group "'+group_name+'" requires a list of "profiles" in config '+ get_config_path())
    sys.exit(1)  # abort because of missing profiles in group

  if not 'start_url' in config[group_name]:
    print('Group "'+group_name+'" requires a "start_url" value in config '+ get_config_path())
    sys.exit(1)  # abort because of missing start_url in group

  if len(config[group_name]['start_url']) == 0:
    print('Group "'+group_name+'" "start_url" cannot be empty in config '+ get_config_path())
    sys.exit(1)  # abort because of empty start_url in group

  if not 'region' in config[group_name]:
    print('Group "'+group_name+'" requires a "region" value in config '+ get_config_path())
    sys.exit(1)  # abort because of missing region in group

  if len(config[group_name]['region']) == 0:
    print('Group "'+group_name+'" "region" cannot be empty in config '+ get_config_path())
    sys.exit(1)  # abort because of empty region in group

def check_profiles_sanity(profiles,config):
  if len(profiles) == 1 and profiles[0] == '':
    print('No profiles to process, please check your "profiles" list in config '+ get_config_path())
    sys.exit(1)  # abort because of list of profiles being empty

  for profile in profiles:
    if not profile in config:
      print('Profile "'+profile+'" not found in config '+ get_config_path())
      sys.exit(1)  # abort because of missing profile

    if not 'account_id' in config[profile]:
      print('Profile "'+profile+'" requires an "account_id" value in config '+ get_config_path())
      sys.exit(1)  # abort because of missing start_url in group
    
    if len(config[profile]['account_id']) == 0:
      print('Profile "'+profile+'" "account_id" cannot be empty in config '+ get_config_path())
      sys.exit(1)  # abort because of empty account_id in profile

    if not 'role' in config[profile]:
      print('Profile "'+profile+'" requires a "role" value in config '+ get_config_path())
      sys.exit(1)  # abort because of missing role in group

    if len(config[profile]['role']) == 0:
      print('Profile "'+profile+'" "role" cannot be empty in config '+ get_config_path())
      sys.exit(1)  # abort because of empty role in profile


def parse_args():
  parser = argparse.ArgumentParser()
  parser.add_argument("group", help="Account group name to setup credentials for")
  parser.add_argument("--assume-roles", action="store_true", default=False, help="Set this flag to set credentials for assumed roles")
  args = vars(parser.parse_args())
  return args['group'], args['assume_roles']



def main():  
  group, assume_roles = parse_args()
  config = configparser.ConfigParser()
  config.read(get_config_path())
  check_config_sanity(group,config)

  awscreds = configparser.ConfigParser()
  awscreds.read(get_creds_path())

  # Work out which account(s) we want refreshed
  profiles = config[group]['profiles'].split(',')

  check_profiles_sanity(profiles,config)

  start_url = config[group]['start_url']
  region = config[group]['region']

  # Get an access token
  access_token = get_access_token(start_url, region)

  session=botocore.session.get_session()
  sso_client = session.create_client(
    'sso',
    region_name=region
  )

  # Get role credentials for each account
  for profile in profiles:
    account_id = config[profile]['account_id']
    role = config[profile]['role']
    role_creds = sso_client.get_role_credentials(
      roleName = role,
      accountId = account_id,
      accessToken = access_token
    )

    if not awscreds.has_section(profile):
      awscreds.add_section(profile)

    awscreds[profile]['aws_access_key_id'] = role_creds['roleCredentials']['accessKeyId']
    awscreds[profile]['aws_secret_access_key'] = role_creds['roleCredentials']['secretAccessKey']
    awscreds[profile]['aws_session_token'] = role_creds['roleCredentials']['sessionToken']
    
    if assume_roles and 'assumes' in config[profile]:
      assume_role(awscreds, config, profile)
      awscreds = awscreds

    print(f"Acct: \t{account_id} - OK")
    print(f"\texport AWS_PROFILE={profile}")

  # Write them into the aws creds file
  with open(get_creds_path(), 'w') as credsfile:
    awscreds.write(credsfile)

main()
